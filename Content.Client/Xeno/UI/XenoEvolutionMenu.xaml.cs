using Content.Shared.Xeno;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client.Xeno.UI;

[GenerateTypedNameReferences]
public sealed partial class XenoEvolutionMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;

    private readonly SpriteSystem _spriteSystem = default!;
    private readonly XenoEvolutionBoundUserInterface _owner;

    public event Action<BaseButton.ButtonEventArgs, XenoEvolution>? OnEvolveButtonPressed;

    public XenoEvolutionMenu(XenoEvolutionBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = IoCManager.Resolve<IEntityManager>().System<SpriteSystem>();

        _owner = owner;
    }

    public void UpdateState(XenoEvolutionBoundInterfaceState state)
    {
        EvolutionPoints.Text = $"Эволюция: {(int)state.Evolution} e.p.";
        EvolutionModifer.Text = $"Модификатор: x{state.EvolutionModifer}";
        EvolutionsContainer.RemoveAllChildren();

        foreach (var evolution in state.Evolutions)
        {
            var prototype = evolution.Prototype ?? string.Empty;
            var entityPrototype = _prototypeManager.Index<EntityPrototype>(prototype);

            var tier = 0;
            if (entityPrototype.Components.TryGetComponent("XenoTier", out var comp) && comp is XenoTierComponent)
            {
                var component = (XenoTierComponent) comp;
                tier = component.Tier;
            }

            EvolutionLimit.Text = $"Ограничение: нет";

            var count = 0;
            if (state.Tiers.TryGetValue(tier, out var tiers))
            {
                count = tiers;
            }

            var limited = false;
            if (state.Limit.TryGetValue(tier, out var limit))
            {
                limited = limit != -1 && limit <= count;
                EvolutionLimit.Text = $"Ограничение: {count} / {limit}";
            }

            var eneabled = state.Evolution >= evolution.Evolution && state.Enabled && !limited;

            var texture = _spriteSystem.GetPrototypeIcon(prototype).Default;
            var newEvolution = new XenoEvolutionControl(entityPrototype.Name, entityPrototype.Description, $"{evolution.Evolution} e.p.", eneabled, texture);
            newEvolution.BuyButton.OnButtonDown += args => _owner.Evolve(evolution);

            EvolutionsContainer.AddChild(newEvolution);
        }
    }
}
