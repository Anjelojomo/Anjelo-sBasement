using Content.Shared._CM14.Xeno;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._CM14.Xeno.UI;

[GenerateTypedNameReferences]
public sealed partial class XenoEvolutionMenu : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly XenoEvolutionBoundUserInterface _owner;

    public event Action<BaseButton.ButtonEventArgs, XenoEvolution>? OnEvolveButtonPressed;

    public XenoEvolutionMenu(XenoEvolutionBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = IoCManager.Resolve<IEntityManager>().System<SpriteSystem>();

        _owner = owner;
    }

    public void UpdateState(XenoEvolutionBoundInterfaceState state)
    {
        EvolutionPoints.Text = $"Плазма {(int) state.Evolution}";
        EvolutionModifer.Text = $"Модификатор: x{state.EvolutionModifer}";
        EvolutionsContainer.RemoveAllChildren();

        foreach (var evolution in state.Evolutions)
        {
            var prototype = evolution.Prototype;
            var entityPrototype = _prototypeManager.Index<EntityPrototype>(prototype);

            var tier = 0;
            if (entityPrototype.Components.TryGetComponent("XenoTier", out var comp) && comp is XenoTierComponent component)
            {
                tier = component.Tier;
            }

            EvolutionLimit.Text = $"Ограничение: нет";

            var count = 0;
            if (state.Tiers.TryGetValue(tier, out var tiers))
            {
                count = tiers;
            }

            var limited = false;
            if (state.Limit.TryGetValue(tier, out var limit))
            {
                limited = limit != -1 && limit <= count;
                EvolutionLimit.Text = $"Ограничение: {count} / {limit}";
            }

            var enabled = state.Evolution >= evolution.Evolution && state.Enabled && !limited;

            var texture = _spriteSystem.GetPrototypeIcon(prototype).Default;
            var newEvolution = new XenoEvolutionControl(entityPrototype.Name, entityPrototype.Description,
                $"{evolution.Evolution} e.p.", enabled, texture);
            newEvolution.BuyButton.OnButtonDown += _ => _owner.Evolve(evolution);

            EvolutionsContainer.AddChild(newEvolution);
        }
    }
}
