using Content.Shared._CM14.EmergencyRetreat;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._CM14.EmergencyRetreat.UI;

[GenerateTypedNameReferences]
public sealed partial class EmergencyRetreatMenu : DefaultWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;
    private TimeSpan _time = TimeSpan.Zero;

    public EmergencyRetreatMenu(EmergencyRetreatBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Activate.OnPressed += _ =>
        {
            owner.SendRunFtl();
        };
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        var progress = 1d; // Hiding elements is cringe
        if (_time != TimeSpan.Zero)
            progress = Math.Clamp(_timing.CurTime.TotalSeconds / _time.TotalSeconds, 0d, 1d);

        Progress.Value = (float)progress;
    }

    public void UpdateState(EmergencyRetreatBoundUserInterfaceState state)
    {
        // Set local fields
        _time = state.Time;

        // Update labels
        State.Text = Loc.GetString($"emergency-retreat-state-{Enum.GetName(state.State)}");

        // Update buttons
        Activate.Disabled = state.State != EmergencyRetreatState.Idle;
        WarningNoShuttle.Visible = state.State == EmergencyRetreatState.None;
    }
}
